{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "https://github.com/anvil/anvil/blob/master/schemas/v1.0.0.json",
	"title": "Anvil",
	"description": "API Maker",
	"type": "object",
	"$defs": {
		"Enum": {
			"type": "object",
			"properties": {
				"Type": {
					"type": "string",
					"description": "The type of the enum values",
					"enum": [
						"String",
						"Int"
					]
				},
				"Values": {
					"type": "object",
					"description": "The key value pair of the enum, with additional config if necessary",
					"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
						"type": "object",
						"properties": {
							"Name": {
								"type": "string",
								"description": "The name of the enum value. Usually used by the generators to create values in the database and code."
							},
							"Value": {
								"type": "string",
								"description": "The value of the enum. Usually used by the generators to create values in the database and code."
							}
						},
						"required": [
							"Values"
						],
						"additionalProperties": false
					}
				}
			},
			"required": [
				"Type",
				"Values"
			],
			"additionalProperties": false
		},
		"Field": {
			"type": "object",
			"properties": {
				"Type": {
					"type": "string",
					"description": "The field type, mostly used by the programming language, but can be used by the database and in proto files too.",
					"enum": [
						"String",
						"Int",
						"Timestamp",
						"Enum",
						"Map",
						"Map[String]Map",
						"List[String]",
						"List[Int]",
						"List[Timestamp]",
						"List[Enum]",
						"List[Map]"
					]
				},
				"Confidentiality": {
					"type": "string",
					"description": "Confidentiality is used to know how confidential we should treat a field, mostly to complain with legal regulations. If the value is not specified, the default value is \"LOW\"",
					"enum": [
						"LOW",
						"MEDIUM",
						"HIGH"
					]
				},
				"Optional": {
					"type": "boolean",
					"description": "If the field is optional or not. By default, every field is required."
				},
				"Format": {
					"type": "string",
					"description": "If the values is encoded/encrypted/formatted/transformed in any way, like a string json object, base64 image, RFC3339 timestamp, bcrypt password."
				},
				"DbType": {
					"type": "string",
					"description": "The raw database type, used when generating migrations."
				},
				"Validate": {
					"type": "array",
					"description": "Array of validations to be executed in the field. When the validation will be executed depends on the generator, but we advise to run them on the Delivery only. They can be in any format that your generator accepts.",
					"items": {
						"type": "string"
					}
				},
				"Properties": {
					"anyOf": [
						{
							"type": "object",
							"description": "Used for Map, Map[String]Map and List[Map]. The definition of the map.",
							"patternProperties": {
								"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
									"$ref": "#/$defs/Field"
								}
							}
						},
						{
							"type": "object",
							"description": "Reference of a Type or Entity",
							"patternProperties": {
								"^($ref)$": {
									"type": "string"
								}
							}
						}
					]
				},
				"Values": {
					"anyOf": [
						{
							"type": "object",
							"description": "Used for Enum and List[Enum]. The values of the enum.",
							"patternProperties": {
								"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
									"type": "string"
								}
							}
						},
						{
							"type": "object",
							"description": "Reference of an Enum",
							"patternProperties": {
								"^($ref)$": {
									"$ref": "#/$defs/Enum"
								}
							}
						}
					]
				}
			},
			"required": [
				"Type"
			]
		},
		"Import": {
			"type": "object",
			"patternProperties": {
				"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
					"type": "object",
					"description": "Dependencies and Imports are code-specific reference to create your \"classes\" and methods",
					"properties": {
						"Import": {
							"type": "object",
							"description": "Information about how to import the dependency/input.",
							"properties": {
								"Alias": {
									"type": "string",
									"description": "Alias/name for the import, if nor specified will use default."
								},
								"Path": {
									"type": "string",
									"description": "Path to import the dependency/input."
								}
							},
							"required": [
								"Path"
							]
						},
						"Type": {
							"type": "string",
							"description": "The type to be used in the import/value."
						}
					},
					"required": [
						"Import",
						"Type"
					]
				}
			},
			"additionalProperties": false
		},
		"HttpExample": {
			"type": "object",
			"description": "Specification for the HTTP request/response",
			"properties": {
				"Body": {
					"type": "object",
					"description": "Body of the request/response"
				},
				"Query": {
					"type": "object",
					"description": "Query params of the request/response"
				},
				"Path": {
					"type": "object",
					"description": "Path params of the request/response"
				},
				"Headers": {
					"type": "object",
					"description": "Headers of the request/response"
				}
			}
		}
	},
	"properties": {
		"Domain": {
			"type": "string",
			"description": "The name of the domain being defined. A single project can have multiple domains. Example: You have the \"Post\" project, it can have the \"Post\" and \"PostComment\" domains, because both are related to Posts.",
			"pattern": "^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$"
		},
		"Metadata": {
			"type": "object",
			"description": "The name of the domain being defined. A single project can have multiple domains. Example: You have the \"Post\" project, it can have the \"Post\" and \"PostComment\" domains, because both are related to Posts.",
			"properties": {
				"Description": {
					"type": "string"
				},
				"Servers": {
					"type": "object",
					"description": "The url to each of your servers, like Production and Staging",
					"patternProperties": {
						"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
							"type": "object",
							"properties": {
								"Url": {
									"type": "string"
								}
							},
							"required": [
								"Url"
							]
						}
					}
				}
			}
		},
		"Relationships": {
			"type": "object",
			"description": "The relationships that the project has with other projects. Useful to know which version of another project it uses and track updates.",
			"patternProperties": {
				"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
					"type": "object",
					"description": "Usually the `Domain` in the related schema",
					"properties": {
						"Uri": {
							"type": "string",
							"description": "Uri to relationship. If it's a local file, must start with `file://` (you can use relative paths, like `./example.yaml`, but we recommend to use it only for testing purposes), if it's a url can start with `http://` or `https://`.",
							"format": "uri-reference"
						}
					},
					"required": [
						"Uri"
					],
					"additionalProperties": false
				}
			}
		},
		"Imports": {
			"$ref": "#/$defs/Import",
			"description": "Reusable imports to be used as Dependency or Input."
		},
		"Auth": {
			"type": "object",
			"description": "Definition of authentication and authorization",
			"patternProperties": {
				"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
					"type": "object",
					"properties": {
						"Description": {
							"type": "string",
							"description": "Description for the authentication type."
						},
						"Scheme": {
							"type": "string",
							"description": "The scheme/type of authentication/authorization",
							"enum": [
								"Bearer",
								"Basic"
							]
						},
						"Format": {
							"type": "string",
							"description": "Special format for the auth, like JWT for Bearer"
						},
						"ApplyToAllRoutes": {
							"type": "boolean",
							"description": "If it should be applied to all routes by default. Default value is `false`."
						}
					},
					"required": [
						"Scheme"
					]
				}
			}
		},
		"Enums": {
			"type": "object",
			"description": "Description of string or integer types with fixed values.",
			"patternProperties": {
				"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
					"$ref": "#/$defs/Enum"
				}
			}
		},
		"Types": {
			"type": "object",
			"description": "Reusable types for Fields, Inputs or Outputs.",
			"patternProperties": {
				"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
					"$ref": "#/$defs/Field"
				}
			}
		},
		"Events": {
			"type": "object",
			"description": "Events emitted by your service. Can be used to track subscriptions and as a documentation for other teams to subscribe.",
			"patternProperties": {
				"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
					"type": "object",
					"properties": {
						"Formats": {
							"type": "array",
							"description": "Formats that the event is emitted",
							"items": {
								"type": "string"
							}
						},
						"Type": {
							"anyOf": [
								{
									"type": "object",
									"description": "Description of the emitted event",
									"patternProperties": {
										"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
											"$ref": "#/$defs/Field"
										}
									},
									"additionalProperties": false
								},
								{
									"type": "object",
									"description": "Reference of a Type or Entity",
									"patternProperties": {
										"^($ref)$": {
											"type": "string"
										}
									}
								}
							]
						}
					},
					"required": [
						"Formats",
						"Type"
					],
					"additionalProperties": false
				}
			}
		},
		"Entities": {
			"type": "object",
			"description": "A map to your database tables. Can be used by generators to handle migrations or generate language-specific types.",
			"properties": {
				"Schema": {
					"type": "string",
					"description": "The database schema, used when you don't want to use the public schema."
				},
				"ColumnsCase": {
					"type": "string",
					"description": "The case to format the columns when generating migrations or database-related things."
				},
				"Entities": {
					"type": "object",
					"description": "The entities of your domain. They should represent the tables of your database.",
					"patternProperties": {
						"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
							"type": "object",
							"properties": {
								"Name": {
									"type": "string",
									"description": "The name of your table as should be specified in the database. This values isn't modified in any way, it's passed directly to the database."
								},
								"Description": {
									"type": "string",
									"description": "Description of your table."
								},
								"Columns": {
									"anyOf": [
										{
											"type": "object",
											"description": "Database columns",
											"patternProperties": {
												"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
													"$ref": "#/$defs/Field"
												}
											},
											"additionalProperties": false
										},
										{
											"type": "object",
											"description": "Database columns, with $ref",
											"patternProperties": {
												"^($ref)$": {
													"type": "string"
												}
											}
										}
									]
								},
								"PrimaryKeys": {
									"type": "array",
									"description": "A list of all the primary keys of your table",
									"items": {
										"type": "string",
										"pattern": "^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$"
									}
								},
								"Indexes": {
									"type": "array",
									"description": "The indexes of your table, including unique indexes",
									"items": {
										"type": "object",
										"properties": {
											"Columns": {
												"type": "array",
												"description": "The columns that compose the index",
												"items": {
													"type": "string",
													"pattern": "^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$"
												}
											},
											"Unique": {
												"type": "boolean",
												"description": "If it's a unique index or not"
											}
										},
										"required": [
											"Columns"
										],
										"additionalProperties": false
									}
								},
								"ForeignKeys": {
									"type": "array",
									"description": "The foreign keys of your table.",
									"items": {
										"type": "object",
										"properties": {
											"Columns": {
												"type": "array",
												"description": "Columns on the current entity to be referenced. The name MUST be written as in the SCHEMA, and not as it appears on the database",
												"items": {
													"type": "string",
													"pattern": "^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$"
												}
											},
											"RefTable": {
												"type": "string",
												"description": "Target table to reference. The name MUST be written as in the DATABASE, and not as it appears on the schema"
											},
											"RefColumns": {
												"type": "array",
												"description": "Columns on the target entity to be referenced. The name MUST be written as in the DATABASE, and not as it appears on the schema",
												"items": {
													"type": "string",
													"pattern": "^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$"
												}
											},
											"OnDelete": {
												"type": "string",
												"description": "ON DELETE behavior. This value is not formatted, will be written in the migration as it appears here."
											},
											"OnUpdate": {
												"type": "string",
												"description": "ON UPDATE behavior. This value is not formatted, will be written in the migration as it appears here."
											}
										},
										"required": [
											"Columns",
											"RefTable",
											"RefColumns"
										],
										"additionalProperties": false
									}
								}
							},
							"required": [
								"Columns",
								"PrimaryKeys"
							],
							"additionalProperties": false
						}
					}
				}
			},
			"required": [
				"Entities"
			],
			"additionalProperties": false
		},
		"Repository": {
			"type": "object",
			"description": "The way that you will interact with your database.",
			"properties": {
				"Dependencies": {
					"type": "object",
					"description": "Default dependencies received in the class/centralizer of the methods.",
					"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
						"type": "object",
						"properties": {
							"$ref": "#/$defs/Import"
						}
					}
				},
				"Inputs": {
					"type": "object",
					"description": "Default dependencies received in the class/centralizer of the methods.",
					"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
						"type": "object",
						"properties": {
							"$ref": "#/$defs/Import"
						}
					}
				},
				"Methods": {
					"type": "object",
					"description": "Methods of the repository to execute actions in the database.",
					"patternProperties": {
						"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
							"type": "object",
							"properties": {
								"Description": {
									"type": "string",
									"description": "Description of your table."
								},
								"Input": {
									"$ref": "#/$defs/Field"
								},
								"Output": {
									"$ref": "#/$defs/Field"
								}
							}
						}
					},
					"additionalProperties": false
				}
			},
			"required": [
				"Methods"
			],
			"additionalProperties": false
		},
		"Usecase": {
			"type": "object",
			"description": "Were the business logic is at.",
			"properties": {
				"Dependencies": {
					"type": "object",
					"description": "Default dependencies received in the class/centralizer of the methods.",
					"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
						"type": "object",
						"properties": {
							"$ref": "#/$defs/Import"
						}
					}
				},
				"Inputs": {
					"type": "object",
					"description": "Default dependencies received in the class/centralizer of the methods.",
					"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
						"type": "object",
						"properties": {
							"$ref": "#/$defs/Import"
						}
					}
				},
				"Methods": {
					"type": "object",
					"description": "Methods of the repository to execute actions in the database.",
					"patternProperties": {
						"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
							"type": "object",
							"properties": {
								"Description": {
									"type": "string",
									"description": "Description of your table."
								},
								"Input": {
									"$ref": "#/$defs/Field"
								},
								"Output": {
									"$ref": "#/$defs/Field"
								},
								"Events": {
									"type": "array",
									"description": "Events emitted from this usecase",
									"items": {
										"type": "string",
										"pattern": "^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$"
									}
								},
								"Delivery": {
									"type": "object",
									"description": "Configuration about how the users/clients/things will access this usecase",
									"properties": {
										"Grpc": {
											"type": "object",
											"description": "gRPC delivery configuration. By just including an empty `Grpc` on the delivery, the route will already be created.",
											"properties": {
												"Examples": {
													"type": "object",
													"description": "Examples of requests. This can be used as documentation or by generators to create e2e tests.",
													"patternProperties": {
														"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
															"type": "object",
															"description": "A name for the example. Example: `Success`, `DuplicatedUser`, `PostNotFound`",
															"properties": {
																"StatusCode": {
																	"type": "integer",
																	"description": "Expected status code returned. Default is `0`."
																},
																"Message": {
																	"type": "object",
																	"description": "The message to be sent in the request"
																},
																"Returns": {
																	"type": "object",
																	"description": "The expected response"
																}
															}
														}
													},
													"additionalProperties": false
												}
											},
											"additionalProperties": false
										},
										"Http": {
											"type": "object",
											"description": "http delivery configuration",
											"properties": {
												"StatusCode": {
													"type": "integer",
													"description": "Response http status code. Default is `200`."
												},
												"Method": {
													"type": "string",
													"description": "http method that the route accepts",
													"enum": [
														"GET",
														"HEAD",
														"POST",
														"PUT",
														"DELETE",
														"CONNECT",
														"OPTIONS",
														"TRACE",
														"PATCH"
													]
												},
												"Path": {
													"type": "string",
													"description": "The path for the route to be called. You can use `{}` for parameters, and they will be automatically mapped to the usecase `Input`. Example: `/foo/{Bar}` or `/foo?bar={Bar}`.",
													"pattern": "^/"
												},
												"ReqHeaders": {
													"type": "object",
													"description": "Headers in the request",
													"patternProperties": {
														"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
															"anyOf": [
																{
																	"type": "object",
																	"patternProperties": {
																		"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
																			"$ref": "#/$defs/Field"
																		}
																	},
																	"additionalProperties": false
																},
																{
																	"type": "object",
																	"patternProperties": {
																		"^($inputRef)$": {
																			"type": "string",
																			"description": "A reference for the usecase `Input`"
																		}
																	}
																}
															]
														}
													}
												},
												"ResHeaders": {
													"type": "object",
													"description": "Headers in the response",
													"patternProperties": {
														"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
															"anyOf": [
																{
																	"type": "object",
																	"patternProperties": {
																		"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
																			"$ref": "#/$defs/Field"
																		}
																	},
																	"additionalProperties": false
																},
																{
																	"type": "object",
																	"patternProperties": {
																		"^($outputRef)$": {
																			"type": "string",
																			"description": "A reference for the usecase `Output`"
																		}
																	}
																}
															]
														}
													}
												},
												"Auth": {
													"type": "string",
													"description": "$ref to Auth. Applies it to this route."
												},
												"Examples": {
													"type": "object",
													"description": "Examples of requests and their responses",
													"properties": {
														"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
															"type": "object",
															"properties": {
																"Req": {
																	"$ref": "#/$defs/HttpExample"
																},
																"Res": {
																	"$ref": "#/$defs/HttpExample"
																}
															}
														}
													}
												}
											},
											"required": [
												"Method",
												"Path"
											],
											"additionalProperties": false
										},
										"Queue": {
											"type": "object",
											"description": "Queue delivery configuration",
											"properties": {
												"Id": {
													"type": "string",
													"description": "Queue ID. This is not the true value to listen the queue (like the sqs url when using sqs), it's only a identifier to be formatted by the generator. Example: If you put the id `foo-bar` and the generator uses queue listeners as env vars, so the generator can format the queue id to `QUEUE_ID_FOO_BAR`. The final value of this depends on the generator."
												},
												"Bulk": {
													"type": "boolean",
													"description": "If it process the queues one-by-one or in bulk."
												}
											},
											"required": [
												"Id"
											],
											"additionalProperties": false
										}
									},
									"additionalProperties": false
								}
							},
							"additionalProperties": false
						}
					}
				}
			},
			"required": [
				"Methods"
			],
			"additionalProperties": false
		},
		"Delivery": {
			"type": "object",
			"description": "Specific configuration of how the users/things can interact with your Usecase, like using http APIs or gRPC clients.",
			"properties": {
				"Dependencies": {
					"type": "object",
					"description": "Default dependencies received in the class/centralizer of the methods.",
					"^([A-Z][a-z0-9]+)((d)|([A-Z0-9][a-z0-9]+))*([A-Z])?$": {
						"type": "object",
						"properties": {
							"$ref": "#/$defs/Import"
						}
					}
				}
			}
		}
	},
	"required": [
		"Domain"
	],
	"additionalProperties": false
}