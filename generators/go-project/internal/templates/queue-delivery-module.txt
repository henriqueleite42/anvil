package queue_delivery

import (
{{- range .ImportsQueueDelivery }}
	{{- range . }}
	{{ . }}
	{{- end }}
{{ end -}}
)

{{ range .MethodsQueueDelivery }}
func (self *queueDelivery) {{ .DomainPascal }}{{ .MethodName }}() {
	logger := self.logger.With().
		Str("dmn", "{{ .DomainPascal }}").
		Str("mtd", "{{ .MethodName }}").
		Logger()

	logger.Trace().Msg("create queueCtx")
	queueCtx := context.WithValue(self.ctx, "logger", logger)

	go func() {
		self.messagingAdapter.CreateListener(queueCtx, &adapters.CreateListenerInput{
			ListenerId: self.secretsAdapter.{{ .DomainPascal }}{{ .QueueIdPascal  }}QueueId,
			Wg:         self.wg,
			Fn: func(i []adapters.JsonEvent) {
				var events []*{{ .InputName }}
				for _, v := range i {
					event := &{{ .InputName }}{}
					err := json.Unmarshal(v, &event)
					if err != nil {
						logger.Error().Err(err).Msg(err.Error())
						continue
					}

					events = append(events, event)
				}

				logger.Debug().
					Any("events", events).
					Msg("processing events")

				self.{{ .DomainCamel }}Usecase.{{ .MethodName }}(self.ctx, events)
			},
		})
	}()
}
{{ end }}
