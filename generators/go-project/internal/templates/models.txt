{{- $pkg := "models" -}}
package {{ $pkg }}

import (
{{- range .ImportsModels }}
	{{- range . }}
	{{ . }}
	{{- end }}
{{ end -}}
)
{{ range $enum := .Enums }}
type {{ $enum.GolangName }} {{ $enum.GolangType }}

const (
{{- range $enumVal := $enum.Values }}
	{{ $enum.GolangName }}_{{ $enumVal.Name }}{{ $enumVal.Spacing }} {{ $enum.GolangName }} = {{ if eq $enum.GolangType "string" }}"{{ $enumVal.Value }}"{{ else }}{{ $enumVal.Value }}{{ end }}
{{- end }}
)

var {{ $enum.GolangName }}Values = []{{ $enum.GolangType }}{
{{- range $enumVal := $enum.Values }}
	{{ if eq $enum.GolangType "string" }}"{{ $enumVal.Value }}"{{ else }}{{ $enumVal.Value }}{{ end }},
{{- end }}
}
{{ end -}}

{{ range $type := .Types }}
type {{ $type.GolangType }} struct {
{{- range $prop := $type.MapProps }}
	{{ $prop.Name }}{{ $prop.Spacing1 }} {{ $prop.Type }}{{ if $prop.Tags }}{{ $prop.Spacing2 }} `{{ $prop.Tags }}`{{ end }}
{{- end }}
}
{{ end -}}

{{ range $entity := .Entities }}
type {{ $entity.GolangType }} struct {
{{- range $prop := $entity.MapProps }}
	{{ $prop.Name }}{{ $prop.Spacing1 }} {{ $prop.Type }}{{ if $prop.Tags }}{{ $prop.Spacing2 }} `{{ $prop.Tags }}`{{ end }}
{{- end }}
}
{{ end -}}

{{- range $event := .Events }}
type {{ $event.GolangType }} struct {
{{- range $prop := $event.MapProps }}
	{{ $prop.Name }}{{ $prop.Spacing1 }} {{ $prop.Type }}{{ if $prop.Tags }}{{ $prop.Spacing2 }} `{{ $prop.Tags }}`{{ end }}
{{- end }}
}
{{ end -}}
